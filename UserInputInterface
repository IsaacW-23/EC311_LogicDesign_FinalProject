`timescale 1ns / 1ps

module UserInputInterface(
    input wire clk,          // Clock signal
    input wire reset,        // Reset signal
    input wire enable,       // Enable signal to start the process
    input wire [7:0] userData, // User data input (from switches or another source)
    output reg askUsername,  // Signal to prompt for username
    output reg askPassword,  // Signal to prompt for password
    output reg [7:0] displayData, // Data to be displayed (for VGA module)
    output reg encrypt,      // Signal to trigger encryption
    output reg [7:0] username, // Store username
    output reg [7:0] password  // Store password
);

// State definitions
localparam WAIT = 2'b00,
           USERNAME_PROMPT = 2'b01,
           PASSWORD_PROMPT = 2'b10,
           TRIGGER_ENCRYPT = 2'b11; // New state for triggering encryption

reg [1:0] state; // State variable to track the current stage

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the state and output signals
        state <= WAIT;
        askUsername <= 0;
        askPassword <= 0;
        encrypt <= 0;
        displayData <= 8'b0;
        username <= 8'b0;
        password <= 8'b0;
    end
    else if (enable) begin
        case (state)
            WAIT: begin
                // Start the username prompt
                askUsername <= 1;
                askPassword <= 0;
                state <= USERNAME_PROMPT;
            end
            USERNAME_PROMPT: begin
                // Capture the username and display the prompt
                username <= userData; // Capture username
                displayData <= "U"; // Representing username prompt
                askUsername <= 0;
                state <= PASSWORD_PROMPT;
            end
            PASSWORD_PROMPT: begin
                // Capture the password and display the prompt
                password <= userData; // Capture password
                displayData <= "P"; // Representing password prompt
                askPassword <= 1;
                state <= TRIGGER_ENCRYPT;
            end
            TRIGGER_ENCRYPT: begin
                // Trigger encryption process
                encrypt <= 1;
                state <= WAIT;
            end
        endcase
    end
    else begin
        // Reset encryption trigger after it has been set
        encrypt <= 0;
    end
end

endmodule
