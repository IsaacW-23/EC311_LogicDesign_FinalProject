`timescale 1ns / 1ps

module SystemControl(
    input wire clk,
    input wire reset,
    input wire [7:0] userData,
    input wire userDone,
    input wire [7:0] enteredUsername,
    input wire [7:0] enteredPassword,
    output reg askForData,
    output reg [7:0] storageData,
    input wire [7:0] storedData,
    output reg startEncrypt,
    output reg startDecrypt,
    input wire doneEncrypt,
    input wire doneDecrypt,
    input wire [7:0] encryptedData,
    input wire [7:0] decryptedData,
    parameter [7:0] CORRECT_USERNAME = 8'b10101010;
    parameter [7:0] CORRECT_PASSWORD = 8'b01010101
);

localparam WAIT_FOR_INPUT = 0,
           STORE_DATA = 1,
           ENCRYPT_DATA = 2,
           DECRYPT_DATA = 3,
           PROCESS_COMPLETE = 4;

reg [2:0] state;

reg [7:0] username;
reg [7:0] password;
reg authentication_success;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset logic
        state <= WAIT_FOR_INPUT;
        askForData <= 1;
        startEncrypt <= 0;
        startDecrypt <= 0;
        username <= CORRECT_USERNAME;
        password <= CORRECT_PASSWORD;
        authentication_success <= 0;
    end
    else begin
        case (state)
            WAIT_FOR_INPUT: begin
                if (userDone) begin
                    if ((enteredUsername == username) && (enteredPassword == password)) begin
                        storageData <= userData;
                        state <= STORE_DATA;
                    end else begin
                        askForData <= 1;
                    end
                end
            end
            STORE_DATA: begin
                startEncrypt <= 1;
                state <= ENCRYPT_DATA;
            end
            ENCRYPT_DATA: begin
                if (doneEncrypt) begin
                    startEncrypt <= 0;
                    storageData <= encryptedData;
                    state <= DECRYPT_DATA;
                end
            end
            DECRYPT_DATA: begin
                startDecrypt <= 1;
                if (doneDecrypt) begin
                    startDecrypt <= 0;
                    state <= PROCESS_COMPLETE;
                end
            end
            PROCESS_COMPLETE: begin
                // Process completed, ready for new input
                askForData <= 1;
                state <= WAIT_FOR_INPUT;
            end
        endcase
    end
end

endmodule
